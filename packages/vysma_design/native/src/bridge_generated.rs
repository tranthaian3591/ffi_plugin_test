#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.78.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::structs::column_layout_struct::VysmaColumnLayoutSetting;

// Section: wire functions

fn wire_create_root_widget_tree_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_root_widget_tree",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| create_root_widget_tree(),
    )
}
fn wire_column_layout_default_setting_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "column_layout_default_setting",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| column_layout_default_setting(),
    )
}
fn wire_column_layout_setting_to_string_impl(
    port_: MessagePort,
    widget_tree: impl Wire2Api<VysmaColumnLayoutSetting> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "column_layout_setting_to_string",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_widget_tree = widget_tree.wire2api();
            move |task_callback| column_layout_setting_to_string(api_widget_tree)
        },
    )
}
fn wire_string_to_column_layout_setting_impl(
    port_: MessagePort,
    data: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "string_to_column_layout_setting",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_data = data.wire2api();
            move |task_callback| string_to_column_layout_setting(api_data)
        },
    )
}
fn wire_widget_type_to_name_impl(
    port_: MessagePort,
    widget_type: impl Wire2Api<WidgetType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "widget_type_to_name",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_widget_type = widget_type.wire2api();
            move |task_callback| widget_type_to_name(api_widget_type)
        },
    )
}
fn wire_widget_type_to_icon_impl(
    port_: MessagePort,
    widget_type: impl Wire2Api<WidgetType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "widget_type_to_icon",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_widget_type = widget_type.wire2api();
            move |task_callback| widget_type_to_icon(api_widget_type)
        },
    )
}
fn wire_hello_world_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "hello_world",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| hello_world(),
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<WidgetType> for i32 {
    fn wire2api(self) -> WidgetType {
        match self {
            0 => WidgetType::Root,
            1 => WidgetType::Row,
            2 => WidgetType::Column,
            3 => WidgetType::Button,
            4 => WidgetType::Text,
            5 => WidgetType::Icon,
            _ => unreachable!("Invalid variant for WidgetType: {}", self),
        }
    }
}
// Section: impl IntoDart

impl support::IntoDart for VysmaColumnLayoutSetting {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.element_id.into_dart(),
            self.parent_element_id.into_dart(),
            self.icon.into_dart(),
            self.label.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for VysmaColumnLayoutSetting {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_create_root_widget_tree(port_: MessagePort) {
        wire_create_root_widget_tree_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_column_layout_default_setting(port_: MessagePort) {
        wire_column_layout_default_setting_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_column_layout_setting_to_string(port_: MessagePort, widget_tree: JsValue) {
        wire_column_layout_setting_to_string_impl(port_, widget_tree)
    }

    #[wasm_bindgen]
    pub fn wire_string_to_column_layout_setting(port_: MessagePort, data: String) {
        wire_string_to_column_layout_setting_impl(port_, data)
    }

    #[wasm_bindgen]
    pub fn wire_widget_type_to_name(port_: MessagePort, widget_type: i32) {
        wire_widget_type_to_name_impl(port_, widget_type)
    }

    #[wasm_bindgen]
    pub fn wire_widget_type_to_icon(port_: MessagePort, widget_type: i32) {
        wire_widget_type_to_icon_impl(port_, widget_type)
    }

    #[wasm_bindgen]
    pub fn wire_hello_world(port_: MessagePort) {
        wire_hello_world_impl(port_)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    impl Wire2Api<VysmaColumnLayoutSetting> for JsValue {
        fn wire2api(self) -> VysmaColumnLayoutSetting {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                4,
                "Expected 4 elements, got {}",
                self_.length()
            );
            VysmaColumnLayoutSetting {
                element_id: self_.get(0).wire2api(),
                parent_element_id: self_.get(1).wire2api(),
                icon: self_.get(2).wire2api(),
                label: self_.get(3).wire2api(),
            }
        }
    }

    // Section: impl Wire2Api for JsValue

    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<i32> for JsValue {
        fn wire2api(self) -> i32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
    impl Wire2Api<WidgetType> for JsValue {
        fn wire2api(self) -> WidgetType {
            (self.unchecked_into_f64() as i32).wire2api()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_create_root_widget_tree(port_: i64) {
        wire_create_root_widget_tree_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_column_layout_default_setting(port_: i64) {
        wire_column_layout_default_setting_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_column_layout_setting_to_string(
        port_: i64,
        widget_tree: *mut wire_VysmaColumnLayoutSetting,
    ) {
        wire_column_layout_setting_to_string_impl(port_, widget_tree)
    }

    #[no_mangle]
    pub extern "C" fn wire_string_to_column_layout_setting(
        port_: i64,
        data: *mut wire_uint_8_list,
    ) {
        wire_string_to_column_layout_setting_impl(port_, data)
    }

    #[no_mangle]
    pub extern "C" fn wire_widget_type_to_name(port_: i64, widget_type: i32) {
        wire_widget_type_to_name_impl(port_, widget_type)
    }

    #[no_mangle]
    pub extern "C" fn wire_widget_type_to_icon(port_: i64, widget_type: i32) {
        wire_widget_type_to_icon_impl(port_, widget_type)
    }

    #[no_mangle]
    pub extern "C" fn wire_hello_world(port_: i64) {
        wire_hello_world_impl(port_)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_vysma_column_layout_setting_0(
    ) -> *mut wire_VysmaColumnLayoutSetting {
        support::new_leak_box_ptr(wire_VysmaColumnLayoutSetting::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }
    impl Wire2Api<VysmaColumnLayoutSetting> for *mut wire_VysmaColumnLayoutSetting {
        fn wire2api(self) -> VysmaColumnLayoutSetting {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<VysmaColumnLayoutSetting>::wire2api(*wrap).into()
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl Wire2Api<VysmaColumnLayoutSetting> for wire_VysmaColumnLayoutSetting {
        fn wire2api(self) -> VysmaColumnLayoutSetting {
            VysmaColumnLayoutSetting {
                element_id: self.element_id.wire2api(),
                parent_element_id: self.parent_element_id.wire2api(),
                icon: self.icon.wire2api(),
                label: self.label.wire2api(),
            }
        }
    }

    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_VysmaColumnLayoutSetting {
        element_id: *mut wire_uint_8_list,
        parent_element_id: *mut wire_uint_8_list,
        icon: *mut wire_uint_8_list,
        label: *mut wire_uint_8_list,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_VysmaColumnLayoutSetting {
        fn new_with_null_ptr() -> Self {
            Self {
                element_id: core::ptr::null_mut(),
                parent_element_id: core::ptr::null_mut(),
                icon: core::ptr::null_mut(),
                label: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_VysmaColumnLayoutSetting {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
